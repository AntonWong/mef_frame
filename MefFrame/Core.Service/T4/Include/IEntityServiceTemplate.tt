<#+
public class IEntityServiceTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public IEntityServiceTemplate(T4ModelInfo model)
    {
        _model = model;
    }
    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("I{0}Contract.cs", _model.Name);
        }
    }

    public override string TransformText()
    {
#>
//------------------------------------------------------------------------------
//Copyright ©车易拍-公共服务组团队. All Rights Reserved.
//------------------------------------------------------------------------------
using Core.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>;
using System;
using System.Linq;
using System.Linq.Expressions;

namespace Core.Service
{
    /// <summary>
    /// ——<#= _model.Description #>
    /// </summary>    
    public interface I<#= _model.Name #>Contract
    {
       
        //查询数据集
        IQueryable<<#= _model.Name #>> <#= _model.Name #>s { get; }
        //添加
        int Insert(<#= _model.Name #> entity);
        /// <summary>
        ///  删除-根据ID删除实体
        /// </summary>
        /// <param name="id"> 主键ID </param>
        /// <param name="isSave"> 默认值false;是否执行保存.isSave:true 保存，isSave:false 不保存 </param>
        /// <returns> 操作影响的行数 </returns>
        int Delete(int id,bool isSave=false);
        /// <summary>

        ///  修改-根据ID修改实体
        /// </summary>
        /// <param name="id">主键ID</param>
        /// <param name="updateExpression">Lamda表达式 修改实体</param>
        /// <param name="isSave"> 默认值false;是否执行保存.isSave:true 保存，isSave:false 不保存 </param>
        /// <returns></returns>
        int Update(int id, Expression<Func<<#= _model.Name #>, <#= _model.Name #>>> updateExpression,bool isSave=false);
   
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>